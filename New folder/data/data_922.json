{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV to polar coordinates for hexagonal pattern\n    vec2 st = uv * 2.0 - 1.0;\n    float r = length(st);\n    float a = atan2(st.y, st.x);\n    // Create hexagonal grid using polar coordinates\n    float angleStep = pi / 3.0;\n    float angleOffset = sin(iTime) * angleStep;\n    \n    // Calculate distance to nearest hexagon edge\n    float dist = abs(sin(a + angleOffset) * r);\n    float threshold = 0.5 + 0.2 * sin(iTime * 2.0 + r * 10.0);\n    // Create pulsating effect with color gradients\n    vec3 color;\n    if (dist < threshold) {\n        // Use HSL to RGB conversion for smooth color transitions\n        float hue = (a / (2.0 * pi)) + iTime * 0.5;\n        float saturation = 1.0 - abs(r - 0.7);\n        float lightness = 0.5 + 0.3 * sin(iTime + r * 10.0);\n        \n        color = hsl2rgb(vec3(hue, saturation, lightness));\n    } else {\n        // Create shifting background pattern\n        vec2 noiseUV = uv * 4.0 + iTime;\n        float noiseValue = turbulent(noiseUV) * 0.5 + 0.5;\n        \n        color = hsl2rgb(vec3(\n            noiseValue * 0.7,\n            1.0 - noiseValue,\n            0.3 + noiseValue * 0.4\n        ));\n    }\n    // Add pulsating glow effect\n    float glow = max(0.0, 1.0 - r) * (0.5 + 0.5 * sin(iTime));\n    color += glow;\n    return vec4(color, 1.0);\n}"
}