{
  "src": "vec4 Effect2(vec2 uv) {\n    // Normalize UV coordinates to -1.0 to 1.0 range\n    vec2 st = uv * 2.0 - 1.0;\n    \n    // Add some animation using time\n    float time = iTime * 0.5;\n    \n    // Create orbiting points with expanding rings\n    vec3 color = vec3(0.0);\n    int numPoints = 4;\n    \n    for(int i = 0; i < numPoints; i++) {\n        // Calculate point position with orbital motion\n        float angle = time + float(i) * PI * 2.0 / float(numPoints);\n        vec2 pointPos = vec2(sin(angle), cos(angle)) * 0.5;\n        \n        // Add some noise to the orbit radius\n        float noiseOffset = noise(vec3(pointPos.x, pointPos.y, time)) * 0.1;\n        pointPos *= 1.0 + noiseOffset;\n        \n        // Calculate distance from current fragment to orbiting point\n        vec2 diff = st - pointPos;\n        float dist = length(diff);\n        \n        // Create expanding rings effect\n        float ring = mod(dist - time, 0.5) * 2.0;\n        ring = abs(ring - 1.0);\n        \n        // Add color with HSL to RGB conversion\n        vec3 hslColor = vec3(float(i)/float(numPoints), 1.0, 0.5 + ring*0.5);\n        vec3 rgbColor = hsl2rgb(hslColor);\n        \n        // Combine colors from multiple points\n        color += rgbColor * (1.0 - ring) * 0.4;\n    }\n    \n    // Add some global noise for extra texture\n    float globalNoise = turbulent(vec3(st, time)) * 0.2;\n    color *= 1.0 + globalNoise;\n    \n    return vec4(color, 1.0);\n}"
}