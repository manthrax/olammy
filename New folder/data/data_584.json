{
  "src": "vec4 Effect2(vec2 uv) {\n    // Time-based rotation\n    float time = iTime * 0.5;\n    \n    // Camera position (simple projection)\n    vec3 cameraPos = vec3(0.0, 0.0, 5.0);\n    \n    // Light source position\n    vec3 lightPos = vec3(sin(time) * 2.0, cos(time) * 2.0, 3.0);\n    \n    // Ray direction from camera to pixel\n    vec3 rayDir = normalize(vec3(uv.x - 0.5, uv.y - 0.5, -1.0));\n    \n    // Rotate the ray direction based on time\n    mat3 rotX = mat3(\n        1.0, 0.0, 0.0,\n        0.0, cos(time), -sin(time),\n        0.0, sin(time), cos(time)\n    );\n    \n    mat3 rotY = mat3(\n        cos(time), 0.0, sin(time),\n        0.0, 1.0, 0.0,\n        -sin(time), 0.0, cos(time)\n    );\n    \n    rayDir = rotX * rotY * rayDir;\n    \n    // Simple box signed distance function\n    float boxSDF(vec3 p) {\n        vec3 d = abs(p) - 1.0;\n        return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n    }\n    \n    // Project light rays onto the cube\n    float lightProjection = 0.0;\n    for(float t = 0.0; t < 10.0; t += 0.1) {\n        vec3 pos = cameraPos + rayDir * t;\n        float dist = boxSDF(pos);\n        if(dist < 0.1) {\n            lightProjection = 1.0 - smoothstep(0.0, 0.5, length(pos - lightPos));\n            break;\n        }\n    }\n    \n    // Chromatic aberration effect\n    vec3 color;\n    for(float c = 0.0; c < 3.0; c++) {\n        float offset = (c - 1.0) * 0.05;\n        vec2 chromUV = uv + vec2(sin(time + c) * offset, cos(time + c) * offset);\n        \n        // Calculate color for each channel\n        vec3 finalColor = hsl2rgb(vec3(\n            time + c,\n            1.0,\n            lightProjection * 0.5 + 0.5\n        ));\n        \n        if(c == 0.0) {\n            color.r = finalColor.r;\n        } else if(c == 1.0) {\n            color.g = finalColor.g;\n        } else {\n            color.b = finalColor.b;\n        }\n    }\n    \n    return vec4(color, 1.0);\n}"
}