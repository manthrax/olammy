{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV coordinates to polar form\n    vec2 st = uv * 2.0 - 1.0;\n    float angle = atan2(st.y, st.x);\n    float radius = length(st);\n    // Create orbiting effect using time\n    angle += iTime * 0.5;\n    // Add chromatic aberration by offsetting each color channel\n    vec3 color;\n    color.r = sin(angle + iTime) * 0.5 + 0.5;\n    color.g = sin(angle + iTime + 2.0) * 0.5 + 0.5;\n    color.b = sin(angle + iTime - 2.0) * 0.5 + 0.5;\n    // Add turbulence for dynamic effect\n    float noiseValue = turbulent(vec3(uv, iTime)) * 0.1;\n    radius += noiseValue;\n    // Convert to HSL and back to RGB for color transformation\n    vec3 hslColor = vec3(angle * 2.0 / PI, 1.0, 0.5 + noiseValue * 0.5);\n    color = hsl2rgb(hslColor);\n    // Create ring pattern using radius\n    float ring = sin(radius * 8.0) * 0.5 + 0.5;\n    color *= ring;\n    return vec4(color, 1.0);\n}"
}