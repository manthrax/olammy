{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create chromatic aberration effect by offsetting UV coordinates for each color channel\n    vec2 redUV = uv + vec2(0.01, 0.005);\n    vec2 greenUV = uv;\n    vec2 blueUV = uv - vec2(0.01, 0.005);\n    // Create flowing sine wave pattern with noise and turbulence\n    float scale = 4.0;\n    float timeFactor = iTime * 0.5;\n    \n    // Calculate base intensity for each color channel\n    float redIntensity = sin(redUV.x * scale + timeFactor) * \n                        sin(redUV.y * scale + timeFactor);\n    float greenIntensity = sin(greenUV.x * scale + timeFactor) *\n                          sin(greenUV.y * scale + timeFactor);\n    float blueIntensity = sin(blueUV.x * scale + timeFactor) *\n                         sin(blueUV.y * scale + timeFactor);\n    // Add turbulence for more dynamic effect\n    redIntensity += turbulent(redUV * 2.0 + vec2(timeFactor));\n    greenIntensity += turbulent(greenUV * 2.0 + vec2(timeFactor));\n    blueIntensity += turbulent(blueUV * 2.0 + vec2(timeFactor));\n    // Create color variations using HSL to RGB conversion\n    vec3 redColor = hsl(0.5, 1.0, 0.5);\n    vec3 greenColor = hsl(0.3, 1.0, 0.5);\n    vec3 blueColor = hsl(0.1, 1.0, 0.5);\n    // Combine intensity and color\n    vec3 finalColor = vec3(\n        redIntensity * redColor.r,\n        greenIntensity * greenColor.g,\n        blueIntensity * blueColor.b\n    );\n    return vec4(finalColor, 1.0);\n}"
}