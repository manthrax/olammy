{
  "src": "vec4 Effect2(vec2 uv) {\n    vec3 finalColor = vec3(0.0);\n    \n    // Time-based animation\n    float t = iTime * 0.5;\n    \n    // Number of particles (simulated through layers)\n    const int numLayers = 4;\n    \n    for(int i = 0; i < numLayers; i++) {\n        // Layer parameters\n        float layerSpeed = pow(1.2, float(i)) * 0.5;\n        float layerRadius = pow(1.3, float(i)) * 0.7;\n        vec3 layerColor = hsl2rgb(vec3(float(i) * 0.3, 1.0, 0.8));\n        \n        // Particle position in polar coordinates\n        float angle = uv.x * 10.0 + t * layerSpeed + noise(vec3(uv, t)) * 2.0;\n        float radius = length(uv) * layerRadius + noise(vec2(angle, t)) * 0.2;\n        \n        // Convert to cartesian coordinates\n        vec2 pos = vec2(cos(angle), sin(angle)) * radius;\n        \n        // Add noise and turbulence for more organic movement\n        pos += noise(vec3(pos, t)) * 0.1;\n        pos += turbulent(vec2(pos + t)) * 0.05;\n        \n        // Compute color with trails effect\n        float dist = length(pos - uv);\n        float alpha = smoothstep(0.1, 0.0, abs(dist));\n        \n        // Mix colors for trail effect\n        finalColor = mix(finalColor, layerColor * (1.0 + sin(t + angle) * 0.5), alpha * 0.3);\n    }\n    \n    // Add central gravitational field glow\n    float glow = smoothstep(0.7, 0.0, length(uv));\n    finalColor += vec3(1.0, 0.8, 0.6) * glow * 0.5;\n    \n    return vec4(finalColor, 1.0);\n}"
}