{
  "src": "vec4 Effect2(vec2 uv) {\n    // Time-based color variation\n    float time = iTime * 0.5;\n    \n    // Base color with metallic feel\n    vec3 baseColor = hsl2rgb(vec3(sin(time)*0.6 + 0.5, 0.8, 0.4));\n    \n    // Create noise layers for displacement\n    float scale1 = 4.0;\n    float scale2 = 8.0;\n    vec2 st = uv * scale1;\n    \n    // Add time-based offset to create flow effect\n    st += vec2(time*0.5, time*0.3);\n    \n    // Use turbulent noise for displacement\n    float displacement = turbulent(st * scale1) * 0.5;\n    displacement += turbulent((st + vec2(time)) * scale2) * 0.3;\n    \n    // Create ripple effect with mouse interaction\n    vec2 mousePos = vec2(0.5, 0.5); // Simulated mouse position\n    float distanceToMouse = length(uv - mousePos);\n    displacement += (1.0 - smoothstep(0.2, 0.8, distanceToMouse)) * 0.3;\n    \n    // Displace UV coordinates based on noise\n    vec2 displacedUV = uv + displacement * 0.1;\n    displacedUV = mod(displacedUV, 1.0);\n    \n    // Add metallic sheen effect\n    vec3 lightDir = normalize(vec3(0.5, 0.5, 1.0));\n    vec3 normal = normalize(vec3(\n        turbulent(uv * scale1 + time) * 2.0 - 1.0,\n        turbulent((uv + vec2(time)) * scale2) * 2.0 - 1.0,\n        1.0\n    ));\n    float specular = pow(max(dot(normal, lightDir), 0.0), 32.0);\n    \n    // Combine effects\n    vec3 finalColor = mix(\n        baseColor,\n        hsl2rgb(vec3(sin(time)*0.6 + 0.5, 0.8, 0.6)),\n        abs(displacement) * 0.5\n    );\n    finalColor += specular * 0.4;\n    \n    return vec4(finalColor, 1.0);\n}"
}