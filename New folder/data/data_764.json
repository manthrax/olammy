{
  "src": "uniform vec2 resolution;\nuniform float time;\n// Turbulence function (you can use your own implementation)\nfloat turbulent(vec3 p) {\n    return sin(p.x * 10.0 + time) * \n           cos(p.y * 10.0 + time) * \n           sin(p.z * 10.0 + time);\n}\nvoid main() {\n    vec2 st = gl_FragCoord.xy / resolution.xy;\n    st -= 0.5; // Center the coordinates\n    \n    float t = time * 0.3;\n    \n    // Rotate the coordinate system\n    vec2 rotatedSt;\n    rotatedSt.x = st.x * cos(t) - st.y * sin(t);\n    rotatedSt.y = st.x * sin(t) + st.y * cos(t);\n    \n    // Compute sine waves in x and y directions with different frequencies\n    float waveX = sin(rotatedSt.x * 4.0 + t) * 0.5;\n    float waveY = sin(rotatedSt.y * 6.0 - t) * 0.5;\n    \n    // Combine the waves\n    float value = (waveX + waveY) * 0.5;\n    \n    // Add turbulence for variation\n    value += turbulent(vec3(rotatedSt, time)) * 0.2;\n    \n    // Convert to color with time-varying offsets\n    vec3 color = vec3(\n        sin(value + t),\n        sin(value + t * 0.7 + 1.0),\n        sin(value + t * 1.0 - 1.0)\n    );\n    \n    gl_FragColor = vec4(color, 1.0);\n}"
}