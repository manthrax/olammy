{
  "src": "vec4 Effect2(vec2 uv) {\n    // Time-based animation\n    float time = iTime * 0.5;\n    \n    // Create frequency components for water waves\n    vec2 freq1 = vec2(sin(time), cos(time)) * 0.5 + 0.5;\n    vec2 freq2 = vec2(sin(time * 0.7), cos(time * 0.7)) * 0.3 + 0.3;\n    \n    // Generate displacement map using noise\n    float displacement = \n        noise(uv * 4.0 + time) * 0.5 +\n        noise(uv * 2.0 + freq1) * 0.3 +\n        noise(uv * 1.0 + freq2) * 0.2;\n    \n    // Create water depth effect\n    float depth = length(uv) * 0.7;\n    displacement += sin(time + depth * 2.0) * 0.4;\n    \n    // Apply displacement to UV coordinates\n    vec2 uv2 = uv + vec2(\n        sin(displacement * 3.0 + time) * 0.1,\n        cos(displacement * 3.0 + time) * 0.1\n    );\n    \n    // Add secondary displacement for more detail\n    uv2 += noise(uv2 * 4.0 + vec2(1.0, 1.0)) * 0.1;\n    \n    // Create color transitions using HSL to RGB conversion\n    vec3 waterColor = hsl(\n        sin(time * 0.5) * 0.2 + 0.6,   // Hue (cyan/blue)\n        0.7,                            // Saturation\n        0.5 + displacement * 0.2       // Lightness modulation\n    );\n    \n    // Add shimmer effect based on UV coordinates and time\n    float shimmer = noise(uv2 * 8.0 + vec2(time)) * 0.1;\n    waterColor += hsl(\n        sin(time * 0.3) * 0.2 + 0.9,   // Hue (white/very light blue)\n        0.5,\n        0.7\n    ) * shimmer;\n    \n    return vec4(waterColor, 1.0);\n}"
}