{
  "src": "uniform vec2 uResolution;\nuniform float iTime;\nvec3 hsl2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nfloat turbulent(vec2 st) {\n    float power = 0.5;\n    float scale = 0.5;\n    float sum = 0.0;\n    \n    for(int i=0; i<4; i++) {\n        vec2 sample = sin(st * scale + iTime) * 10.0;\n        sum += length(sample) * power;\n        scale *= 0.5;\n        power *= 0.5;\n    }\n    return sum;\n}\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / uResolution.xy;\n    vec2 st = uv * 10.0; // Scale the coordinates\n    \n    // Add turbulence to create variations\n    st += turbulent(st) * 0.5;\n    \n    // Compute sine and cosine waves with time offset\n    float waveX = sin(st.x + iTime);\n    float waveY = cos(st.y + iTime);\n    \n    // Combine the waves into a single value\n    float value = (waveX + waveY) * 0.5;\n    \n    // Create HSL color, cycling through hues over time\n    vec3 colorHSL = vec3(fract(value + iTime * 0.1), 1.0, 0.5);\n    \n    // Convert to RGB and output\n    vec3 finalColor = hsl2rgb(colorHSL);\n    gl_FragColor = vec4(finalColor, 1.0);\n}"
}