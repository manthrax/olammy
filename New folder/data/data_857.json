{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV to polar coordinates for hexagonal tiling\n    vec2 st = uv * 2.0 - 1.0;\n    float r = length(st);\n    float a = atan2(st.y, st.x) + iTime; // Add time-based rotation\n    \n    // Create hexagonal grid pattern using polar coordinates\n    float scale = 5.0;\n    vec2 polar = vec2(r * scale, a);\n    vec2 tile = floor(polar);\n    \n    // Calculate color based on position and time\n    vec3 hslColor = vec3(\n        mod(a * 0.1 + iTime, 1.0), // Hue variation over time\n        0.7,                       // Saturation\n        0.5                        // Lightness\n    );\n    \n    // Apply sine wave distortion to UV coordinates\n    float distortion = sin(r * 8.0 + iTime) * 0.2;\n    vec2 distortedUV = uv + vec2(sin(a * 3.0 + iTime), cos(a * 5.0 + iTime)) * distortion;\n    \n    // Convert HSL to RGB and apply noise-based modulation\n    vec3 rgbColor = hsl2rgb(hslColor);\n    float noiseValue = noise(vec3(distortedUV, iTime));\n    rgbColor *= 1.0 + sin(noiseValue * 8.0 + iTime) * 0.5;\n    \n    // Create hexagonal pattern with color shifts\n    float cell = mod(r * scale, 1.0);\n    vec3 finalColor = mix(vec3(0.0), rgbColor, smoothstep(0.4, 0.6, cell));\n    \n    return vec4(finalColor, 1.0);\n}"
}