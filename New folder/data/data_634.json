{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV to polar coordinates\n    vec2 center = vec2(0.5);\n    vec2 polar = uv - center;\n    float angle = atan2(polar.y, polar.x);\n    float radius = length(polar);\n    // Add time-based rotation and scaling\n    float timeRotation = iTime * 0.1;\n    angle += timeRotation;\n    radius *= 0.5 + 0.5 * sin(iTime * 0.5);\n    // Create kaleidoscopic effect with multiple slices\n    int numSlices = 8;\n    float sliceAngle = angle * numSlices;\n    float mirroredRadius = abs(abs(sin(sliceAngle)) - cos(sliceAngle));\n    \n    // Add turbulence for dynamic patterns\n    vec2 noiseUV = uv * 10.0 + iTime;\n    float noiseValue = turbulent(noiseUV);\n    radius += noiseValue * 0.3;\n    // Create vibrant color transitions using HSL\n    vec3 hslColor = vec3(\n        fract(timeRotation + angle / (2.0 * PI)),\n        1.0,\n        0.5 + 0.5 * sin(radius * 10.0)\n    );\n    vec3 rgbColor = hsl2rgb(hslColor);\n    // Combine all elements for the final effect\n    float finalRadius = radius * mirroredRadius;\n    return vec4(rgbColor * (1.0 - noiseValue * 0.5), 1.0);\n}"
}