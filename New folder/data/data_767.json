{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create rotation matrix based on time\n    float t = iTime * 0.5;\n    mat2 rot = mat2(cos(t), -sin(t), sin(t), cos(t));\n    \n    // Apply rotation and turbulence to UV coordinates\n    vec2 st = uv * 1.5;\n    st = turbulent(st) * 0.5 + 0.5;\n    st = (st - 0.5) * 3.0;\n    st = rot * st;\n    \n    // Create geometric pattern using circles and rotation\n    float d = length(st);\n    vec2 pos = vec2(0.0);\n    float angle = atan2(st.y, st.x);\n    \n    // Add multiple rotating elements\n    const int numShapes = 4;\n    float[4] rotations = float[4](0.0, pi/2.0, pi, 3.0*pi/2.0);\n    bool inside = false;\n    \n    for(int i = 0; i < numShapes; i++) {\n        mat2 r = mat2(cos(rotations[i]), -sin(rotations[i]), sin(rotations[i]), cos(rotations[i]));\n        vec2 transformed = r * st;\n        float radius = 1.0 + noise(vec3(uv, t)) * 0.5;\n        if(length(transformed) < radius * 0.8) {\n            inside = true;\n            break;\n        }\n    }\n    \n    // Pulsating color using HSL\n    vec3 colorHSL = vec3(sin(t * 2.0 + angle) * 0.5 + 0.5, 1.0, 0.7);\n    vec3 finalColor = hsl2rgb(colorHSL);\n    \n    // Combine with noise and turbulence for final effect\n    float intensity = sin(iTime) * 0.5 + 0.5;\n    finalColor *= intensity;\n    \n    return vec4(finalColor, 1.0);\n}"
}