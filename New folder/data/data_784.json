{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV coordinates to polar form for rotation\n    vec2 st = uv * 2.0 - 1.0;\n    float angle = atan(st.y, st.x) + iTime * 0.5;\n    float radius = length(st);\n    \n    // Create rotating geometric pattern using hexagonal symmetry\n    float segments = 6.0; // Hexagon shape\n    float pattern = sin(angle * segments + iTime) * 0.5 + 0.5;\n    pattern *= 1.0 - turbulent(vec2(radius, iTime * 0.1)) * 0.3;\n    \n    // Dynamic color cycling using HSL\n    vec3 hslColor = vec3(\n        fract(iTime * 0.1) * 360.0,\n        0.7 + noise(vec2(radius, iTime)) * 0.3,\n        0.5 + pattern * 0.5\n    );\n    \n    // Add noise-textured gradients\n    vec2 noiseScale = vec2(4.0, 4.0);\n    float gradient = noise(st * noiseScale) * 0.5;\n    gradient += noise(st * noiseScale * 2.0 + iTime) * 0.3;\n    \n    // Combine pattern and gradients\n    vec3 finalColor = hsl2rgb(hslColor) * (gradient + pattern);\n    \n    return vec4(finalColor, 1.0);\n}"
}