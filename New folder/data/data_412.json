{
  "src": "vec4 Effect2(vec2 uv) {\n    vec4 fragColor;\n    \n    // Normalize UV coordinates\n    vec2 adjustedUV = (uv - 0.5) * 2.0;\n    float aspectRatio = 16.0/9.0;\n    adjustedUV.x *= aspectRatio;\n    \n    // Time-based animation\n    float time = iTime * 0.5; // Speed control\n    \n    // Create orbiting pattern using polar coordinates\n    vec2 center = vec2(0.5, 0.5);\n    vec2 pos = uv - center;\n    float dist = length(pos);\n    \n    // Dynamic rotation and radius\n    float angle = sin(time * 2.0) * 0.5 + 0.5;\n    vec2 rotatedUV = vec2(\n        cos(angle) * pos.x - sin(angle) * pos.y,\n        sin(angle) * pos.x + cos(angle) * pos.y\n    ) + center;\n    \n    // Create multiple orbiting circles with dynamic radius\n    float pattern = 0.0;\n    for(float i = 0.0; i < 3.0; i++) {\n        float orbitRadius = 0.4 + sin(time + i * 2.094) * 0.15;\n        vec2 offset = vec2(\n            cos(angle + i * 2.094) * 0.3,\n            sin(angle + i * 2.094) * 0.3\n        );\n        pattern += step(orbitRadius, length(rotatedUV - center + offset));\n    }\n    \n    // Color transitions using HSL to RGB conversion\n    vec3 baseColor = hsl(\n        fract(time * 0.1) * 360.0,\n        0.7 + turbulent(vec2(time)) * 0.3,\n        0.5 + sin(time * 0.5) * 0.5\n    );\n    \n    // Add noise and color variations\n    vec3 finalColor = mix(\n        baseColor,\n        hsl(\n            fract(time * 0.15) * 360.0,\n            0.8 + turbulent(rotatedUV) * 0.2,\n            0.6 + sin(time * 0.7) * 0.4\n        ),\n        pattern\n    );\n    \n    // Apply noise texture for additional detail\n    finalColor += vec3(noise(vec3(uv, time))) * 0.3;\n    \n    fragColor = vec4(finalColor, 1.0);\n    return fragColor;\n}"
}