{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create base terrain height using noise\n    float z = turbulent(vec3(uv * 5.0 + iTime, 0.0)) * 0.5 + 0.5;\n    \n    // Add detail with multiple noise layers\n    z += noise(vec3(uv * 2.0 + iTime * 0.5, 0.0)) * 0.3;\n    z += noise(vec3(uv * 1.0 + iTime * 0.2, 0.0)) * 0.2;\n    \n    // Create color transitions based on height\n    vec3 color = hsl(\n        (z * 0.6 + 0.4) * 360.0,   // Hue varies with height\n        1.0 - abs(z - 0.5) * 2.0,  // Saturation peaks in middle heights\n        z * 0.7 + 0.3             // Lightness darkens at lower elevations\n    );\n    \n    // Add time-based color variation\n    color = hsl2rgb(vec3(\n        color.r,\n        color.g,\n        color.b + sin(iTime * 0.1) * 0.2\n    ));\n    \n    // Add lighting effect\n    vec2 dudx = dFdx(uv);\n    vec2 dudy = dFdy(uv);\n    \n    vec3 normal = vec3(\n        dFdx(z),\n        dFdy(z),\n        1.0\n    );\n    normal = normalize(normal);\n    \n    vec3 lightDir = vec3(sin(iTime * 0.1), cos(iTime * 0.1), 1.0);\n    lightDir = normalize(lightDir);\n    \n    float lighting = dot(normal, lightDir) * 0.5 + 0.5;\n    \n    // Combine color with lighting and add fog\n    vec3 finalColor = color * lighting;\n    \n    // Add distance-based fog\n    float depth = length(uv * 2.0 - 1.0);\n    float fogFactor = exp(-depth * 0.7);\n    \n    finalColor = mix(finalColor, vec3(0.15, 0.25, 0.4), 1.0 - fogFactor);\n    \n    return vec4(finalColor, 1.0);\n}"
}