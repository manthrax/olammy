{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create a grid of squares using integer division\n    vec2 st = floor(uv * 5.0);\n    \n    // Add time-based rotation\n    float angle = iTime * 0.1 + turbulent(st + vec2(iTime)) * 0.5;\n    \n    // Calculate distance from center for each square\n    vec2 center = fract(uv) - 0.5;\n    float d = length(center);\n    \n    // Create rotating squares pattern\n    vec3 color = vec3(0.0);\n    for(float x = -1.0; x <= 1.0; x += 1.0) {\n        for(float y = -1.0; y <= 1.0; y += 1.0) {\n            vec2 offset = vec2(x, y);\n            vec2 rotated = cos(angle) * offset.x - sin(angle) * offset.y;\n            rotated = sin(angle) * offset.x + cos(angle) * offset.y;\n            \n            // Calculate distance from current square\n            float dist = length(rotated - center);\n            \n            // Create color transitions using HSL\n            vec3 hslColor = vec3((iTime + x + y) * 0.2, 1.0, 0.5);\n            vec3 rgbColor = hsl2rgb(hslColor);\n            \n            // Add noise and turbulence for dynamic effect\n            float blend = smoothstep(0.4, 0.6, dist);\n            color += mix(vec3(0.0), rgbColor, blend) * turbulent(st + offset + vec2(iTime));\n        }\n    }\n    \n    // Normalize and return the final color\n    return vec4(color / 9.0, 1.0);\n}"
}