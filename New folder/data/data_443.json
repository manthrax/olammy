{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV to polar coordinates for swirling effect\n    vec2 st = uv * 2.0 - 1.0;\n    float r = length(st);\n    float theta = atan2(st.y, st.x) + sin(r * 5.0 + iTime) * 0.5;\n    \n    // Create base star field with noise\n    float stars = turbulent(vec3(uv * 100.0, iTime)) * 0.5 + 0.5;\n    \n    // Add swirling motion using sine waves\n    vec2 motion = vec2(sin(theta + iTime) * r * 0.1, cos(theta - iTime) * r * 0.1);\n    vec2 distortedUV = uv + motion;\n    \n    // Generate color shifts for vibrant effect\n    vec3 baseColor = hsl2rgb(vec3(\n        sin(r * 5.0 + iTime * 2.0) * 0.5 + 0.5,\n        1.0,\n        0.8\n    ));\n    \n    // Add multiple layers of stars with different scales\n    float total = 0.0;\n    for (int i = 0; i < 5; i++) {\n        vec2 scaledUV = distortedUV * pow(2.0, float(i));\n        float layer = turbulent(vec3(scaledUV, iTime)) * 0.5 + 0.5;\n        total += layer * pow(0.5, float(i));\n    }\n    \n    // Combine everything and add lighting effect\n    vec3 finalColor = baseColor * (total * 2.0);\n    float lightIntensity = max(0.0, 1.0 - length(uv)) * 0.5;\n    finalColor += lightIntensity * 0.8;\n    \n    return vec4(finalColor, 1.0);\n}"
}