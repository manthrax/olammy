{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create a time-based animation component\n    float time = iTime * 0.5;\n    \n    // Create flowing sine wave patterns with different frequencies\n    vec3 flow = sin(vec3(1.0, 2.0, 3.0) * uv.x + time) * 0.5 + 0.5;\n    \n    // Shift RGB channels with different phase offsets for color variation\n    vec3 colorShifts = sin(vec3(0.5, 1.0, 1.5) * time + vec3(0.0, 2.094, 4.188)) * 0.5 + 0.5;\n    \n    // Combine the patterns with noise for added complexity\n    vec2 noiseUV = uv * 10.0 + time;\n    float noiseValue = noise(noiseUV);\n    \n    // Create a turbulent effect using multi-octave turbulence\n    float turbulence = turbulent(vec3(uv, time));\n    \n    // Mix all components together with RGB shifts\n    vec3 finalColor = mix(flow, colorShifts, 0.5) * (1.0 + noiseValue * 0.5);\n    \n    // Convert to HSL and back for vibrant colors\n    return vec4(hsl2rgb(vec3(finalColor)), 1.0);\n}"
}