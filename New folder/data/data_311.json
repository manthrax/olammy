{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV coordinates to polar form\n    vec2 st = uv * 2.0 - 1.0;\n    float r = length(st);\n    float theta = atan2(st.y, st.x) + iTime; // Add time-based rotation\n    \n    // Create rotating geometric patterns using sine functions\n    float pattern1 = sin(theta * 3.0 + iTime * 2.0); // Frequency 3\n    float pattern2 = sin(theta * 5.0 - iTime * 1.5); // Frequency 5\n    float pattern3 = sin(theta * 7.0 + iTime * 2.0); // Frequency 7\n    \n    // Combine patterns with different weights\n    float combined = (pattern1 * 0.4) + (pattern2 * 0.3) + (pattern3 * 0.2);\n    \n    // Create a shape based on the combined pattern\n    float shape = smoothstep(0.5, 1.0, r + combined * 0.5);\n    \n    // Generate color using HSL to RGB conversion with time-based hue shift\n    vec3 color = hsl2rgb(vec3(\n        sin(iTime * 0.5) * 0.5 + 0.5, // Hue variation\n        1.0, // Saturation\n        0.5 // Lightness\n    ));\n    \n    // Add noise and turbulence for more dynamic effect\n    float noiseValue = noise(vec3(uv * 10.0, iTime)) * 0.2;\n    color *= mix(1.0, 1.0 + noiseValue, turbulent(vec3(uv, iTime)) * 0.5);\n    \n    // Blend colors based on distance from center\n    vec3 finalColor = mix(color, vec3(1.0), shape);\n    \n    return vec4(finalColor, 1.0);\n}"
}