{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create orbiting points\n    int numPoints = 8;\n    float time = iTime * 0.5;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for (int i = 0; i < numPoints; i++) {\n        float angle = (float(i) / float(numPoints)) * PI * 2.0 + time;\n        float radius = 0.4 + noise(vec3(angle, time, 0.0)) * 0.2;\n        \n        vec2 pointPos = vec2(cos(angle), sin(angle)) * radius;\n        pointPos += noise(vec3(time, angle, 0.0)) * 0.1;\n        \n        // Calculate distance from current fragment to orbiting point\n        float dist = length(uv - pointPos);\n        \n        // Create expanding wave effect\n        float wave = sin(time + dist * 5.0) * 0.5 + 0.5;\n        wave = smoothstep(0.0, 1.0, wave);\n        \n        // Calculate color based on distance and time\n        vec3 hslColor = vec3(\n            (time + float(i)) * 0.2,\n            0.7 + noise(vec3(time, pointPos.x, pointPos.y)) * 0.3,\n            0.5 + wave * 0.5\n        );\n        \n        vec3 rgbColor = hsl(hslColor);\n        \n        // Combine colors with turbulence effect\n        float turb = turbulent(vec2(uv * 10.0 + time));\n        finalColor += mix(finalColor, rgbColor, wave * (1.0 - turb) * 0.5);\n    }\n    \n    return vec4(finalColor, 1.0);\n}"
}