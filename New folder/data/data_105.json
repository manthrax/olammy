{
  "src": "vec4 Effect2(vec2 uv) {\n    // Initialize variables for orbit trap calculation\n    float x = 0.0;\n    float y = 0.0;\n    float iter = 0.0;\n    float min_dist = 1000.0;\n    \n    // Offset based on time and position\n    vec2 offset = vec2(sin(iTime * 0.5 + uv.x * 2.0), cos(iTime * 0.5 + uv.y * 2.0)) * 0.3;\n    \n    // Calculate orbit trap distance\n    for(int i = 0; i < 10; i++) {\n        // Calculate distance to circle trap\n        float dist = length(vec2(x, y)) - 0.75;\n        min_dist = min(min_dist, abs(dist));\n        \n        // Add noise variation\n        float noise_val = noise(vec3(uv * 4.0 + iTime, iTime));\n        x = x*x - y*y + offset.x + noise_val * 0.1;\n        y = 2.0*x*y + offset.y + noise_val * 0.1;\n        \n        // Check for escape\n        if(length(vec2(x, y)) > 2.0) break;\n    }\n    \n    // Calculate final color based on minimum distance and iteration count\n    vec3 color;\n    if(min_dist < 0.05) {\n        // Inside the trap\n        color = hsl(iter * 0.1 + 0.5, min_dist * 20.0, 0.5);\n    } else {\n        // Outside the trap\n        color = hsl(0.7 + iter * 0.1, 1.0, 0.8);\n    }\n    \n    // Convert to RGB and add noise variation\n    color = hsl2rgb(color) + noise(vec3(uv * 4.0 + iTime, 0.0)) * 0.2;\n    \n    return vec4(color, 1.0);\n}"
}