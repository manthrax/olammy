{
  "src": "vec4 Effect2(vec2 uv) {\n    // Rotate coordinates based on time\n    float angle = sin(iTime * 0.5) + 1.5;\n    vec2 rotatedUv = vec2(\n        uv.x * cos(angle) - uv.y * sin(angle),\n        uv.x * sin(angle) + uv.y * cos(angle)\n    );\n    \n    // Create fractal pattern using recursive transformations\n    vec2 originalUv = rotatedUv;\n    for (int i = 0; i < 5; i++) {\n        rotatedUv = abs(rotatedUv * 4.0 - 1.0);\n        rotatedUv += turbulent(vec3(rotatedUv, iTime)) * 0.2;\n    }\n    \n    // Calculate color based on transformed coordinates\n    vec3 color = hsl2rgb(vec3(\n        fract(iTime * 0.5 + length(originalUv) * 2.0),\n        1.0,\n        0.5 + turbulent(vec2(rotatedUv)) * 0.5\n    ));\n    \n    // Add noise and depth to the color\n    float noiseValue = noise(vec3(rotatedUv, iTime));\n    color *= 0.8 + noiseValue * 0.2;\n    \n    return vec4(color, 1.0);\n}"
}