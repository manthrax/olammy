{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create base frequency pattern with time modulation\n    float base = sin(uv.x * 8.0 + iTime * 2.0);\n    \n    // Add noise and turbulence layers for complexity\n    vec3 noiseLayers = vec3(\n        turbulent(uv * 0.5 + iTime),\n        turbulent(uv * 0.25 + iTime * 0.5),\n        turbulent(uv * 0.125 + iTime * 0.75)\n    );\n    \n    // Combine noise layers with different weights\n    float noiseMix = (noiseLayers.x * 0.4) + (noiseLayers.y * 0.3) + (noiseLayers.z * 0.2);\n    \n    // Create color variations using HSL conversion\n    vec3 hslColor = vec3(\n        fract(iTime * 0.1 + uv.x * 0.5),\n        0.7,\n        0.6\n    );\n    \n    // Convert to RGB and mix with noise\n    vec3 rgbColor = hsl2rgb(hslColor);\n    vec3 finalColor = rgbColor * (0.5 + 0.5 * noiseMix);\n    \n    // Add pulsating effect using sine wave\n    float pulse = sin(iTime) * 0.5 + 0.5;\n    finalColor *= pulse;\n    \n    // Mix in additional color variations based on position and time\n    vec3 colorVariation = vec3(\n        sin(uv.x * 4.0 + iTime),\n        cos(uv.y * 4.0 + iTime * 0.5),\n        sin((uv.x + uv.y) * 6.0 + iTime)\n    );\n    \n    finalColor += colorVariation * 0.3;\n    \n    // Apply gamma correction for better contrast\n    finalColor = pow(finalColor, vec3(1.2));\n    \n    return vec4(finalColor, 1.0);\n}"
}