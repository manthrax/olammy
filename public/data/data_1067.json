{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV to polar coordinates\n    vec2 st = uv * 2.0 - 1.0;\n    float r = length(st);\n    float theta = atan2(st.y, st.x);\n    // Add time-based rotation\n    theta += iTime * 0.5 + noise(vec3(uv * 10.0, iTime)) * 0.2;\n    // Create hexagonal grid pattern\n    vec2 grid = vec2(sin(theta), cos(theta));\n    grid *= 4.0;\n    grid.x += sin(iTime) * 2.0;\n    grid.y += cos(iTime) * 2.0;\n    \n    // Calculate distance to nearest grid point\n    vec2 ipos = floor(grid);\n    vec2 fpos = fract(grid);\n    float d = min(min(length(fpos - vec2(0.5)), length(fpos - vec2(1.0, 0.5))), \n                  min(length(fpos - vec2(0.0, 0.5)), length(fpos - vec2(0.5, 1.0))));\n    // Create hexagon shape\n    float hex = smoothstep(0.4, 0.6, d);\n    \n    // Calculate color based on rotation and time\n    vec3 color = hsl(theta * 0.5 + iTime * 0.2, 0.7, 0.5);\n    color = hsl2rgb(color);\n    // Apply noise to color for dynamic effects\n    float n = noise(vec3(uv * 10.0, iTime)) * 0.3;\n    color += n;\n    return vec4(hex * color, 1.0);\n}"
}