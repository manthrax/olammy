{
  "src": "vec4 Effect2(vec2 uv) {\n    vec3 finalColor = vec3(0.0);\n    \n    // Generate 10 points with random orbits\n    for(int i = 0; i < 10; i++) {\n        float t = iTime + float(i)*0.5;\n        \n        // Calculate point position using orbit\n        vec2 pos = vec2(\n            sin(t*0.7 + float(i)*0.3) * (0.5 + noise(vec3(t, float(i), 0.0)) * 0.3),\n            cos(t*0.6 + float(i)*0.4) * (0.5 + noise(vec3(t, float(i)+1.0, 0.0)) * 0.3)\n        );\n        \n        // Calculate distance from current fragment to point\n        vec2 delta = uv - pos;\n        float dist = length(delta);\n        \n        // Add glowing effect based on distance\n        finalColor += hsl2rgb(vec3(\n            sin(iTime + float(i)*0.5) * 0.5 + 0.5,\n            1.0,\n            0.8\n        )) / (dist * dist * 100.0);\n        \n        // Add connection lines between points\n        for(int j = i+1; j < 10; j++) {\n            vec2 pos2 = vec2(\n                sin(t*0.7 + float(j)*0.3) * (0.5 + noise(vec3(t, float(j), 0.0)) * 0.3),\n                cos(t*0.6 + float(j)*0.4) * (0.5 + noise(vec3(t, float(j)+1.0, 0.0)) * 0.3)\n            );\n            \n            vec2 lineDir = normalize(pos2 - pos);\n            float lineDist = length(uv - pos);\n            \n            // Create glowing lines\n            finalColor += hsl2rgb(vec3(\n                sin(iTime + float(j)*0.5) * 0.5 + 0.5,\n                1.0,\n                0.6\n            )) / (lineDist * lineDist * 200.0);\n        }\n    }\n    \n    // Add turbulence effect\n    finalColor *= 1.0 + turbulent(vec3(uv, iTime)) * 0.2;\n    \n    return vec4(finalColor, 1.0);\n}"
}