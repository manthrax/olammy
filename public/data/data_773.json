{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create a time-based frequency component\n    float timeFreq = iTime * 0.5;\n    \n    // Scale UV coordinates for more waves\n    vec2 pos = uv * 8.0;\n    \n    // Create wave pattern using sine functions with different frequencies\n    float waveX = sin(pos.x + timeFreq) * 0.5;\n    float waveY = sin(pos.y + timeFreq * 0.7) * 0.5;\n    \n    // Combine waves and add noise for complexity\n    float combinedWave = (waveX + waveY) * 0.5;\n    combinedWave += noise(vec2(uv * 4.0 + iTime)) * 0.3;\n    \n    // Convert to HSL color space with time-based hue shift\n    vec3 hslColor = vec3(\n        fract(combinedWave + iTime),  // Hue shifts over time\n        0.7,                          // Saturation\n        0.5                           // Lightness\n    );\n    \n    // Convert HSL to RGB and output\n    return vec4(hsl2rgb(hslColor), 1.0);\n}"
}