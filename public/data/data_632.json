{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV coordinates to polar form for rotation effects\n    float theta = atan2(uv.y, uv.x);\n    float r = length(uv * 1.5 - 0.5); // Scale and offset radius\n    \n    // Add time-based rotation\n    theta += iTime * 0.5;\n    \n    // Create geometric pattern using sine waves\n    float pattern = sin(theta * 12.0) * 0.5 + 0.5;\n    pattern *= r < 0.8 ? 1.0 : 0.0; // Apply circular mask\n    \n    // Dynamic color transitions using HSL\n    vec3 hslColor = vec3(\n        sin(theta * 0.5 + iTime) * 0.5 + 0.5, // Hue\n        0.7, // Saturation\n        0.8 // Lightness\n    );\n    \n    // Add layered sine wave interference\n    float wave1 = sin(r * 80.0 - iTime * 2.0) * 0.3;\n    float wave2 = sin(r * 40.0 + theta * 5.0 + iTime) * 0.2;\n    float wave3 = sin(r * 20.0 - theta * 3.0 + iTime * 0.5) * 0.1;\n    \n    // Combine patterns and add noise\n    vec3 color = hsl2rgb(hslColor);\n    color *= pattern;\n    color += vec3(wave1, wave2, wave3);\n    color += noise(uv * 10.0) * 0.2;\n    \n    return vec4(color * 1.5 - 0.2, 1.0); // Scale and clamp\n}"
}