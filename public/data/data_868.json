{
  "src": "vec4 Effect2(vec2 uv) {\n    // Center the coordinates\n    vec2 st = uv - 0.5;\n    \n    // Add rotation based on time\n    float angle = iTime * 0.5;\n    mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    st = rot * st * 1.5; // Scale and rotate\n    \n    // Create triangular pattern using barycentric coordinates\n    vec3 coords = vec3(st.x, st.y, 0.0);\n    coords.xy = abs(coords.xy);\n    \n    // Calculate triangle edges\n    float edge1 = coords.x + coords.y - 0.5;\n    float edge2 = coords.x - coords.y - 0.5;\n    float edge3 = -coords.x - coords.y - 0.5;\n    \n    // Check if inside triangle\n    bool inside = (edge1 < 0.0) && (edge2 < 0.0) && (edge3 < 0.0);\n    \n    // Create color variations using HSL\n    vec3 color1 = hsl(0.5 + sin(iTime * 0.3 + st.x * 2.0), 0.8, 0.6);\n    vec3 color2 = hsl(0.5 + cos(iTime * 0.4 + st.y * 2.0), 0.7, 0.5);\n    \n    // Mix colors based on position\n    vec3 finalColor = mix(color1, color2, abs(st.x) + abs(st.y));\n    \n    // Add noise and turbulence for dynamic effect\n    float noiseVal = noise(vec3(st * 4.0, iTime)) * 0.5;\n    finalColor += noiseVal;\n    \n    // Apply turbulence to create swirling pattern\n    float turb = turbulent(vec2(st.x * 2.0, st.y * 2.0)) * 0.3;\n    finalColor *= 1.0 + turb;\n    \n    return vec4(finalColor, 1.0);\n}"
}