{
  "src": "vec4 Effect2(vec2 uv) {\n    // Waterfall base color and noise\n    float time = iTime * 0.5;\n    \n    // Upper part - waterfall\n    vec3 waterColor = hsl(\n        180.0 + sin(time * 0.5) * 30.0,\n        0.7 + turbulent(vec2(uv.x, time)) * 0.2,\n        0.4 + turbulent(vec2(uv.x*2.0, time*2.0)) * 0.1\n    );\n    \n    // Lower part - abyss and mist\n    vec3 mistColor = hsl(\n        240.0 + cos(time) * 60.0,\n        0.5 + turbulent(vec2(uv.x*0.5, time*0.5)) * 0.2,\n        0.1 + turbulent(vec2(uv.x*3.0, time*3.0)) * 0.1\n    );\n    \n    // Combine colors with smooth transition\n    float blend = smoothstep(0.4, 0.6, uv.y);\n    vec3 color = mix(waterColor, mistColor, blend);\n    \n    // Add droplet trails and shimmer effect\n    if (uv.y < 0.5) {\n        // Droplet trail emission\n        float dist = length(uv - vec2(0.5, 0.4));\n        float glow = exp(-dist * 8.0) * (1.0 + sin(time * 3.0 + dist * 10.0)) * 0.5;\n        \n        // Add turbulence-based shimmer\n        float shimm = turbulent(vec2(uv.x*10.0, time*2.0)) * 0.2;\n        color += vec3(0.2, 0.4, 0.8) * (glow + shimm);\n    }\n    \n    // Add mist particles\n    if (uv.y > 0.5) {\n        float mistDensity = turbulent(vec2(uv.x*5.0, uv.y*5.0)) * 0.3;\n        color += vec3(0.1, 0.2, 0.4) * mistDensity;\n    }\n    \n    // Add light interaction and depth\n    float light = sin(time * 0.7 + uv.x * pi) * 0.5 + 0.5;\n    color *= light;\n    \n    return vec4(color, 1.0);\n}"
}