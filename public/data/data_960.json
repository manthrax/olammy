{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create a grid of nodes with random positions\n    vec2 st = uv * 16.0;\n    int numNodes = 16;\n    \n    // Node properties\n    float time = iTime * 0.5;\n    float nodeRadius = 0.05;\n    float lineThickness = 0.02;\n    \n    // Color transition parameters\n    vec3 colorA = hsl(0.6, 0.7, 0.5);\n    vec3 colorB = hsl(0.1, 0.7, 0.5);\n    \n    // Initialize final color\n    vec4 finalColor = vec4(0.0);\n    \n    // Draw nodes and connections\n    for(int i = 0; i < numNodes; i++) {\n        for(int j = 0; j < numNodes; j++) {\n            vec2 nodePos = vec2(float(i), float(j)) + noise(vec3(float(i), float(j), time)) * 0.5;\n            nodePos = nodePos / float(numNodes);\n            \n            // Calculate distance from current pixel to node\n            vec2 diff = st - nodePos;\n            float dist = length(diff);\n            \n            // Node color with pulsating effect\n            float pulse = sin(time + float(i)*0.3 + float(j)*0.4) * 0.5 + 0.5;\n            float nodeSize = nodeRadius + pulse * 0.05;\n            \n            if(dist < nodeSize) {\n                // Create flowing color effect\n                vec3 color = mix(colorA, colorB, sin(time + dist * 2.0 + float(i)/16.0));\n                finalColor += vec4(hsl2rgb(color), 0.1);\n            }\n            \n            // Draw connections between nodes\n            if(i < numNodes-1 || j < numNodes-1) {\n                vec2 nextNodePos = nodePos;\n                if(i < numNodes-1) nextNodePos.x += 1.0/float(numNodes);\n                else if(j < numNodes-1) nextNodePos.y += 1.0/float(numNodes);\n                \n                vec2 lineDir = normalize(nextNodePos - nodePos);\n                float lineDist = length(st - nodePos + lineDir * clamp(0.5, 0.0, 1.0));\n                \n                if(lineDist < lineThickness) {\n                    finalColor += vec4(hsl2rgb(vec3(0.5, 0.5, 0.5)), 0.05);\n                }\n            }\n        }\n    }\n    \n    // Add turbulence effect\n    vec2 noisePos = uv * 10.0 + time;\n    float turb = turbulent(noisePos) * 0.1;\n    finalColor += vec4(hsl2rgb(vec3(0.5, 0.5, 0.5)), turb);\n    \n    return finalColor;\n}"
}