{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV coordinates to polar form\n    vec2 st = uv * 2.0 - 1.0;\n    float r = length(st);\n    float a = atan2(st.y, st.x);\n    // Create rotating hexagon pattern\n    float rotation = sin(iTime * 0.5) + cos(iTime * 0.3);\n    a += rotation;\n    // Hexagonal tiling using polar coordinates\n    float angleStep = pi / 3.0;\n    float d = min(\n        length(st),\n        min(length(vec2(r, a - angleStep)),\n            min(length(vec2(r, a + angleStep)),\n                min(length(vec2(r, a - 2.0 * angleStep)),\n                    min(length(vec2(r, a + 2.0 * angleStep)),\n                        length(vec2(r, a - 3.0 * angleStep)))))));\n    // Add noise to create dynamic movement\n    vec2 noisePos = uv * 5.0 + iTime;\n    float n = noise(noisePos);\n    d += n * 0.1;\n    // Create pulsing effect\n    float pulse = sin(iTime) * 0.3 + 0.7;\n    d *= pulse;\n    // Generate rainbow colors using HSL\n    vec3 color;\n    if (d < 0.5) {\n        color = hsl2rgb(vec3((a / (2.0 * pi) + iTime * 0.1) * 360.0, 1.0, 0.5));\n    } else {\n        color = vec3(0.0);\n    }\n    // Combine with noise for final effect\n    float intensity = smoothstep(0.4, 0.6, d);\n    color *= intensity;\n    return vec4(color, 1.0);\n}"
}