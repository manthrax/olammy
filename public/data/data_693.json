{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create a grid of cells with noise-based positions\n    vec2 pos = floor(uv * 10.0);\n    vec2 cellPos = pos + turbulent(vec3(pos, iTime)) * 0.5;\n    \n    // Calculate distance to nearby cells\n    float dist = length(uv * 10.0 - cellPos);\n    \n    // Create pulsing color patterns using HSL\n    vec3 color = hsl2rgb(vec3(\n        fract(iTime * 0.1 + pos.x * 0.5) * 360.0,\n        0.7,\n        0.5\n    ));\n    \n    // Add interaction between cells based on distance\n    float interact = smoothstep(0.0, 1.0, sin(iTime + dist * 2.0));\n    color *= mix(vec3(1.0), vec3(0.5, 0.5, 1.0), interact);\n    \n    // Create glowing effect using turbulence\n    float glow = turbulent(vec3(uv * 10.0, iTime)) * 0.5 + 0.5;\n    color *= mix(color, vec3(1.0), glow * 0.5);\n    \n    // Combine multiple layers of cells\n    for (int i = -2; i <= 2; i++) {\n        for (int j = -2; j <= 2; j++) {\n            vec2 neighborPos = pos + vec2(i, j);\n            vec2 neighborCell = neighborPos + turbulent(vec3(neighborPos, iTime)) * 0.5;\n            float neighborDist = length(uv * 10.0 - neighborCell);\n            \n            // Blend colors from neighboring cells\n            vec3 neighborColor = hsl2rgb(vec3(\n                fract(iTime * 0.1 + neighborPos.x * 0.5) * 360.0,\n                0.7,\n                0.5\n            ));\n            \n            float blendAmount = smoothstep(1.0, 0.0, neighborDist);\n            color = mix(color, neighborColor, blendAmount * 0.2);\n        }\n    }\n    \n    // Add overall glow and contrast\n    color = pow(color, vec3(2.0));\n    return vec4(color, 1.0);\n}"
}