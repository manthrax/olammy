{
  "src": "vec4 Effect2(vec2 uv) {\n    vec3 color = vec3(0.0);\n    \n    // Number of particles\n    const int numParticles = 50;\n    \n    // Time-based seed for randomness\n    float timeSeed = iTime * 0.1;\n    \n    // Center point\n    vec2 center = vec2(0.5, 0.5);\n    \n    // For each particle\n    for(int i = 0; i < numParticles; i++) {\n        // Random seed based on particle index and time\n        float seed = (float(i) * 0.1 + timeSeed) * 3.1415926;\n        \n        // Calculate angle with some noise variation\n        float angle = atan2(sin(seed), cos(seed)) + turbulent(vec3(uv, iTime)) * 0.5;\n        \n        // Radius with some variation and noise\n        float radius = 0.3 + noise(vec3(angle, timeSeed, float(i))) * 0.15;\n        \n        // Current position relative to center\n        vec2 pos = center + vec2(cos(angle), sin(angle)) * radius;\n        \n        // Add slight drift based on time\n        angle += iTime * 0.05;\n        \n        // Create orbit trail effect by integrating over time\n        for(float t = 0.0; t < 1.0; t += 0.2) {\n            vec2 prevPos = center + vec2(cos(angle - t), sin(angle - t)) * (radius + noise(vec3(angle, timeSeed, float(i))) * 0.1);\n            \n            // Calculate distance from current UV to particle position\n            float dist = length(uv - prevPos);\n            \n            // Add color contribution with fading trail\n            if(dist < 0.02) {\n                // Color based on angle and noise\n                vec3 particleColor = hsl(angle * 180.0 / PI + timeSeed * 50.0, \n                                       0.7 + noise(vec3(iTime, float(i), seed)) * 0.3,\n                                       0.5 + noise(vec3(float(i), timeSeed, angle)) * 0.2);\n                \n                // Apply exponential fade\n                color += particleColor * exp(-dist * 100.0) * (1.0 - t);\n            }\n        }\n    }\n    \n    // Add some glow around the center\n    float distToCenter = length(uv - center);\n    if(distToCenter < 0.5) {\n        color += vec3(1.0, 0.8, 0.6) * exp(-distToCenter * 4.0) * 0.2;\n    }\n    \n    return vec4(color, 1.0);\n}"
}