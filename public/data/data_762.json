{
  "src": "vec4 Effect2(vec2 uv) {\n    // Create flowing motion with time-based offsets\n    vec2 st = uv + 0.5 * sin(iTime + uv.x * 10.0);\n    \n    // Add rotating pattern\n    float angle = iTime * 0.2 + length(uv - 0.5) * 2.0;\n    vec2 rotated = vec2(\n        (st.x - 0.5) * cos(angle) - (st.y - 0.5) * sin(angle),\n        (st.x - 0.5) * sin(angle) + (st.y - 0.5) * cos(angle)\n    ) + 0.5;\n    \n    // Create scaling effect\n    float scale = 1.0 + 0.3 * sin(iTime * 0.8 + length(uv));\n    rotated *= scale;\n    \n    // Generate noise-based pattern with turbulence\n    vec2 noisePos = rotated * 4.0 + iTime;\n    float n = turbulent(noisePos);\n    \n    // Create color transitions using HSL to RGB conversion\n    vec3 hslColor = vec3(\n        mod(iTime * 0.1, 1.0),   // Hue shifting over time\n        0.7 + 0.3 * sin(n * pi), // Saturation variation\n        0.5 + 0.5 * n           // Lightness modulation\n    );\n    \n    vec3 rgbColor = hsl2rgb(hslColor);\n    \n    // Combine patterns and colors for final effect\n    float shape = length(rotated - 0.5) * 1.4;\n    vec3 finalColor = mix(\n        rgbColor,\n        vec3(0.8, 0.9, 1.0),\n        smoothstep(0.7, 1.0, shape)\n    );\n    \n    return vec4(finalColor, 1.0);\n}"
}