{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV to polar coordinates\n    vec2 centered = uv - 0.5;\n    float r = length(centered);\n    float theta = atan2(centered.y, centered.x);\n    \n    // Add time-based rotation\n    theta += iTime * 0.5 + sin(iTime) * 0.2;\n    \n    // Create kaleidoscopic effect using modular symmetry\n    float symmetries = 8.0;\n    theta = mod(theta + iTime, pi * 2.0);\n    theta = abs(mod(theta, pi / symmetries));\n    \n    // Add noise and turbulence\n    vec2 noiseUV = uv * 10.0 + iTime;\n    float t = turbulent(noiseUV) * 0.5 + 0.5;\n    float n = noise(vec3(uv * 4.0, iTime)) * 0.5 + 0.5;\n    \n    // Create color transitions\n    vec3 color;\n    color.x = mod(theta / (pi / symmetries) + t, 1.0);\n    color.y = r * 2.0 - n;\n    color.z = sin(r * 8.0 + iTime) * 0.5 + 0.5;\n    \n    // Convert to HSL and back to RGB for vibrant colors\n    vec3 hslColor = vec3(\n        mod(color.x + iTime, 1.0),   // Hue variation over time\n        abs(sin(r * 4.0 + color.y)), // Saturation based on position\n        0.5 + t * 0.5               // Lightness modulation\n    );\n    \n    vec3 finalColor = hsl2rgb(hslColor);\n    \n    return vec4(finalColor, 1.0);\n}"
}