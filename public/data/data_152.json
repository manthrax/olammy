{
  "src": "vec4 Effect2(vec2 uv) {\n    // Normalize coordinates to 0-1 range\n    vec2 st = (uv + 1.0) * 0.5;\n    \n    // Create a grid of squares\n    vec2 gridPos = fract(st * 5.0);\n    \n    // Calculate distance from center of each square\n    vec2 center = gridPos - 0.5;\n    \n    // Rotate coordinates based on time\n    float angle = iTime * 0.1 + noise(vec3(gridPos, 0.0)) * 0.5;\n    mat2 rotMatrix = mat2(cos(angle), -sin(angle),\n                         sin(angle), cos(angle));\n    vec2 rotated = rotMatrix * center;\n    \n    // Assign colors to each corner\n    vec3 colorA = hsl(0.0, 1.0, 0.5);\n    vec3 colorB = hsl(0.4, 1.0, 0.5);\n    vec3 colorC = hsl(0.8, 1.0, 0.5);\n    vec3 colorD = hsl(1.2, 1.0, 0.5);\n    \n    // Create smooth transitions between colors\n    vec3 finalColor;\n    if (rotated.x > 0.0 && rotated.y > 0.0) {\n        finalColor = colorA;\n    } else if (rotated.x < 0.0 && rotated.y > 0.0) {\n        finalColor = colorB;\n    } else if (rotated.x < 0.0 && rotated.y < 0.0) {\n        finalColor = colorC;\n    } else {\n        finalColor = colorD;\n    }\n    \n    // Add turbulence effect\n    float turb = turbulent(vec3(rotated, iTime * 0.1)) * 0.5 + 0.5;\n    finalColor *= turb;\n    \n    // Create smooth blending between colors\n    float distanceFromCenter = length(center);\n    float alpha = smoothstep(0.4, 0.6, distanceFromCenter);\n    \n    return vec4(mix(finalColor, hsl(0.0, 0.0, 1.0), alpha), 1.0);\n}"
}