{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV coordinates to polar coordinates\n    vec2 st = uv * 2.0 - 1.0;\n    float angle = atan(st.y, st.x);\n    float radius = length(st);\n    \n    // Add time-based rotation\n    angle += iTime * 0.5;\n    \n    // Create multiple rotating layers\n    float layer1 = sin(angle * 4.0 + iTime) * 0.5 + 0.5;\n    float layer2 = sin(angle * 6.0 - iTime) * 0.5 + 0.5;\n    float layer3 = sin(angle * 8.0 + iTime * 2.0) * 0.5 + 0.5;\n    \n    // Combine layers with noise and turbulence\n    vec3 color1 = hsl2rgb(vec3(0.6 + layer1 * 0.4, 1.0, 0.8));\n    vec3 color2 = hsl2rgb(vec3(0.3 + layer2 * 0.4, 1.0, 0.7));\n    vec3 color3 = hsl2rgb(vec3(0.9 + layer3 * 0.4, 1.0, 0.6));\n    \n    // Additive blending\n    vec3 finalColor = vec3(0.0);\n    finalColor += color1 * turbulent(vec3(uv.x, uv.y, iTime)) * 0.5;\n    finalColor += color2 * turbulent(vec3(uv.x + 0.5, uv.y - 0.5, iTime)) * 0.5;\n    finalColor += color3 * turbulent(vec3(uv.x - 0.5, uv.y + 0.5, iTime)) * 0.5;\n    \n    // Apply gamma correction for additive blending\n    return vec4(sqrt(finalColor), 1.0);\n}"
}