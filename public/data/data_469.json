{
  "src": "vec4 Effect2(vec2 uv) {\n    float time = iTime * 0.5;\n    vec3 color = vec3(0.0);\n    \n    // Orb positions and movements\n    vec2 pos1 = sin(time * 0.3 + vec2(0.0, 1.0)) * 0.4 + uv * 4.0;\n    vec2 pos2 = sin(time * 0.5 + vec2(1.0, 0.0)) * 0.4 + uv * 4.0;\n    vec2 pos3 = sin(time * 0.7) * 0.4 + uv * 4.0;\n    \n    // Calculate distances\n    float d1 = length(uv * 4.0 - pos1);\n    float d2 = length(uv * 4.0 - pos2);\n    float d3 = length(uv * 4.0 - pos3);\n    \n    // Orb colors with time-based shifts\n    vec3 c1 = hsl(0.5 + sin(time) * 0.2, 1.0, 0.8);\n    vec3 c2 = hsl(0.3 + cos(time * 0.7) * 0.2, 1.0, 0.8);\n    vec3 c3 = hsl(0.7 + sin(time * 0.5) * 0.2, 1.0, 0.8);\n    \n    // Add light trails\n    color += c1 * smoothstep(0.4, 0.0, d1) * (0.1 + sin(time * 0.3));\n    color += c2 * smoothstep(0.4, 0.0, d2) * (0.1 + cos(time * 0.5));\n    color += c3 * smoothstep(0.4, 0.0, d3) * (0.1 + sin(time * 0.7));\n    \n    // Add interaction effects between orbs\n    float dist12 = length(pos1 - pos2);\n    float dist13 = length(pos1 - pos3);\n    float dist23 = length(pos2 - pos3);\n    \n    if (dist12 < 0.3) {\n        color += vec3(1.0, 0.5, 0.8) * sin(dist12 / 0.3 + time) * 0.4;\n    }\n    if (dist13 < 0.3) {\n        color += vec3(0.5, 1.0, 0.8) * sin(dist13 / 0.3 + time) * 0.4;\n    }\n    if (dist23 < 0.3) {\n        color += vec3(0.8, 0.5, 1.0) * sin(dist23 / 0.3 + time) * 0.4;\n    }\n    \n    // Add noise for extra detail\n    color += noise(uv * 10.0 + time) * 0.1;\n    \n    return vec4(color * 0.8, 1.0);\n}"
}