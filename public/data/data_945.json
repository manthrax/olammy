{
  "src": "vec4 Effect2(vec2 uv) {\n    // Center the UV coordinates and scale them\n    vec2 st = uv * 2.0 - 1.0;\n    \n    // Create a rotating pattern using multiple layers of rotation\n    float time = iTime * 0.5;\n    \n    // Layer 1: Basic rotation\n    vec2 rotated1 = vec2(\n        cos(time) * st.x + sin(time) * st.y,\n        -sin(time) * st.x + cos(time) * st.y\n    );\n    \n    // Layer 2: Faster rotation\n    vec2 rotated2 = vec2(\n        cos(time * 2.0) * st.x + sin(time * 2.0) * st.y,\n        -sin(time * 2.0) * st.x + cos(time * 2.0) * st.y\n    );\n    \n    // Layer 3: Slow rotation\n    vec2 rotated3 = vec2(\n        cos(time * 0.5) * st.x + sin(time * 0.5) * st.y,\n        -sin(time * 0.5) * st.x + cos(time * 0.5) * st.y\n    );\n    \n    // Combine rotations with noise and turbulence\n    vec2 finalUV = rotated1 * 0.33 + rotated2 * 0.33 + rotated3 * 0.34;\n    finalUV += turbulent(finalUV * 8.0) * 0.1;\n    \n    // Create a triangular pattern\n    vec2 polar = vec2(length(finalUV), atan2(finalUV.y, finalUV.x));\n    float triangle = sin(polar.y * 6.0 + time) * 0.5 + 0.5;\n    \n    // Color transformation with shifting hues\n    vec3 color = hsl(triangle * 0.7 + 0.3, 1.0, 0.5);\n    color *= smoothstep(0.0, 1.0, sin(time) * 0.5 + 0.5);\n    \n    // Add noise to the final color\n    color += noise(finalUV * 8.0 + time) * 0.2;\n    \n    return vec4(color, 1.0);\n}"
}