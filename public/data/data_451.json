{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV coordinates to polar form\n    vec2 st = uv * 2.0 - 1.0;\n    float r = length(st);\n    float a = atan2(st.y, st.x) + iTime * 0.5;\n    \n    // Create multiple rotating points around center\n    const int numPoints = 8;\n    float angleStep = pi * 2.0 / float(numPoints);\n    \n    vec3 color = vec3(0.0);\n    for(int i = 0; i < numPoints; i++) {\n        float angle = a + float(i) * angleStep + iTime * 0.5;\n        vec2 pointPos = vec2(cos(angle), sin(angle)) * 0.7;\n        \n        // Calculate distance from current point\n        float dist = length(st - pointPos);\n        \n        // Create rotating color patterns\n        float hue = (angle + a) * 0.5 + iTime * 0.1;\n        vec3 hslColor = vec3(hue, 1.0, 0.5);\n        vec3 rgbColor = hsl2rgb(hslColor);\n        \n        // Add turbulence for dynamic effect\n        float turb = turbulent(vec3(st.x, st.y, iTime * 0.1));\n        dist += turb * 0.1;\n        \n        // Mix colors based on distance and angle\n        color += rgbColor * smoothstep(0.2, 0.0, abs(dist - 0.4)) *\n                 (1.0 + sin(a * 3.0 + iTime * 2.0)) * 0.5;\n    }\n    \n    // Final color with noise overlay\n    float finalDist = length(st);\n    vec3 finalColor = mix(vec3(0.0), color, smoothstep(0.9, 1.0, r));\n    finalColor += noise(vec2(a, iTime)) * 0.2;\n    \n    return vec4(finalColor, 1.0);\n}"
}