{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV to polar coordinates for rotation effect\n    vec2 st = uv * 2.0 - 1.0;\n    float angle = atan2(st.y, st.x) + iTime; // Add time for rotation\n    float radius = length(st);\n    \n    // Create grid pattern with noise overlay\n    vec3 gridColor;\n    {\n        // Generate cell coordinates\n        vec2 gridUV = floor(uv * 10.0); // Grid size 10x10\n        \n        // Calculate HSL color for each cell based on time\n        float hue = (gridUV.x + gridUV.y) * 0.1 + iTime * 0.5;\n        vec3 hslColor = hsl(hue, 0.7, 0.6);\n        \n        // Add noise pattern to grid cells\n        float cellNoise = noise(vec2(gridUV)) * 0.3;\n        gridColor = hsl2rgb(vec3(hue + cellNoise, 0.8, 0.5));\n    }\n    \n    // Overlay additional noise patterns\n    vec3 noisePattern1 = hsv2rgb(vec3(noise(uv * 4.0 + iTime), 1.0, 1.0)) * 0.4;\n    vec3 noisePattern2 = hsv2rgb(vec3(turbulent(uv * 8.0 + iTime*0.5), 1.0, 1.0)) * 0.3;\n    \n    // Combine grid and noise patterns\n    vec3 finalColor = gridColor + noisePattern1 + noisePattern2;\n    \n    // Add rotation effect to the final color\n    finalColor *= radius < 1.0 ? 1.0 : 0.0; // Keep within unit circle\n    \n    return vec4(fract(finalColor), 1.0);\n}"
}