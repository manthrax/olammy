{
  "src": "vec4 Effect2(vec2 uv) {\n    vec3 color = vec3(0.0);\n    float time = iTime * 0.5;\n    \n    // Grid of points\n    for(int i = -10; i <= 10; i++) {\n        for(int j = -10; j <= 10; j++) {\n            vec2 pos = vec2(float(i), float(j)) * 0.1 + uv * 5.0;\n            float dist = length(pos);\n            \n            // Animate position\n            vec2 offset = vec2(sin(time + float(i)*0.3) * 0.2, cos(time + float(j)*0.3) * 0.2);\n            pos += offset;\n            \n            // Calculate distance from point\n            float d = length(pos - uv * 5.0);\n            \n            // Orb color based on position and time\n            vec3 orbColor = hsl2rgb(vec3((time + float(i)*0.1) * 0.1, 0.7, 0.8));\n            \n            // Add glow effect\n            float glow = smoothstep(0.5, 0.0, d);\n            color += orbColor * glow;\n            \n            // Create interaction between orbs\n            for(int k = -10; k <= 10; k++) {\n                for(int l = -10; l <= 10; l++) {\n                    if(k == i && l == j) continue;\n                    vec2 otherPos = vec2(float(k), float(l)) * 0.1 + uv * 5.0;\n                    otherPos += vec2(sin(time + float(k)*0.3) * 0.2, cos(time + float(l)*0.3) * 0.2);\n                    float distToOther = length(pos - otherPos);\n                    \n                    if(distToOther < 0.1) {\n                        color += hsl2rgb(vec3((time + float(k)*0.1) * 0.1, 0.5, 0.7)) * smoothstep(0.1, 0.0, distToOther);\n                    }\n                }\n            }\n        }\n    }\n    \n    return vec4(color, 1.0);\n}"
}