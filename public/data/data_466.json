{
  "src": "vec4 Effect2(vec2 uv) {\n    // Convert UV coordinates to polar form\n    vec2 st = uv * 2.0 - 1.0;\n    float r = length(st);\n    float a = atan2(st.y, st.x);\n    // Create hexagonal grid pattern\n    a += iTime * 0.5; // Rotate pattern over time\n    a *= 6.0;         // Hexagon has six-fold symmetry\n    \n    // Use floor to create tiling effect\n    vec2 polar = vec2(r, a);\n    vec2 tile = floor(polar + 0.5);\n    // Add noise and turbulence for dynamic effect\n    float noiseVal = noise(vec3(tile.x * 0.1, tile.y * 0.1, iTime * 0.1));\n    float turbulentVal = turbulent(vec2(r * 0.5, a * 0.5));\n    // Calculate color based on position and time\n    vec3 color;\n    color.r = sin(a + iTime) * 0.5 + 0.5;\n    color.g = cos(r - iTime) * 0.5 + 0.5;\n    color.b = turbulentVal;\n    // Convert to HSL for better color control\n    vec3 hslColor = vec3(\n        (a / (2.0 * PI)) + 0.5,   // Hue based on angle\n        1.0 - abs(r - 0.5) * 2.0, // Saturation decreases towards center\n        0.5                       // Fixed lightness\n    );\n    \n    // Convert HSL to RGB and mix with noise\n    vec3 finalColor = hsl2rgb(hslColor);\n    finalColor *= noiseVal * 0.5 + 0.5;\n    return vec4(finalColor, 1.0);\n}"
}