{
  "src": "vec4 Effect2(vec2 uv) {\n    float time = iTime * 0.5;\n    \n    // Create rotating geometric patterns using sine and cosine functions\n    vec2 pos = uv * 10.0 - 5.0;\n    vec3 color = vec3(0.0);\n    \n    // Add circular motion with noise modulation\n    float angle = atan2(pos.y, pos.x) + time;\n    float radius = length(pos) + sin(time * 0.7) * 0.5;\n    vec2 polar = vec2(radius, angle);\n    \n    // Create shifting color palette using HSL conversion\n    vec3 hslColor = vec3(0.6 + sin(time * 0.3), 1.0, 0.5);\n    color += hsl2rgb(hslColor) * smoothstep(4.0, 5.0, radius);\n    \n    // Add square pattern with turbulence\n    vec2 squarePos = uv * 8.0 - 4.0;\n    float squareDist = max(abs(squarePos.x), abs(squarePos.y));\n    color += hsl2rgb(vec3(0.3 + cos(time * 0.5), 1.0, 0.5)) * \n             smoothstep(3.8, 4.2, squareDist);\n    \n    // Mix in noise patterns for added complexity\n    vec3 noisePos = vec3(uv * 4.0, time);\n    float noiseVal = turbulent(noisePos) * 0.5 + 0.5;\n    color += noiseVal * hsl2rgb(vec3(0.9 + sin(time * 0.4), 1.0, 0.3));\n    \n    // Combine all elements with blending\n    vec3 finalColor = mix(color, \n                         hsl2rgb(vec3(0.5 + time*0.1, 1.0, 0.8)),\n                         smoothstep(0.0, 1.0, sin(time * 0.2) * 0.5 + 0.5));\n    \n    return vec4(finalColor, 1.0);\n}"
}