{
  "src": "vec4 Effect2(vec2 uv) {\n    // Center the UV coordinates\n    vec2 uv_centered = uv - 0.5;\n    \n    // Calculate distance from center\n    float r = length(uv_centered);\n    \n    // Create a pulsating effect using time\n    float time_factor = sin(iTime * 0.5) * 0.5 + 0.5;\n    \n    // Generate base color using HSL to RGB conversion\n    vec3 color_base = hsl2rgb(vec3(\n        mod(r * 10.0 + iTime, 1.0),  // Hue varies with radius and time\n        0.7 + noise(vec3(uv_centered * 5.0, iTime)) * 0.3,  // Saturation with noise\n        0.5 + sin(r * 2.0 - iTime) * 0.5  // Brightness variation\n    ));\n    \n    // Add turbulence effect\n    float turbulence = turbulent(vec3(uv_centered * 10.0, iTime)) * 0.5;\n    \n    // Create a swirling pattern using polar coordinates\n    vec2 polar = vec2(\n        cos(r * 8.0 - iTime) * length(uv_centered),\n        sin(r * 8.0 - iTime) * length(uv_centered)\n    );\n    \n    // Combine effects and modulate by radius\n    vec3 final_color = mix(\n        color_base,\n        hsl2rgb(vec3(\n            mod(r * 5.0 + iTime, 1.0),\n            0.9,\n            0.7\n        )),\n        turbulence * time_factor\n    ) * (1.0 - r * 0.8);\n    \n    // Add pulsating glow effect\n    final_color += vec3(\n        noise(vec3(uv_centered * 2.0, iTime)) * time_factor,\n        noise(vec3(uv_centered * 3.0, iTime + 1.0)) * time_factor,\n        noise(vec3(uv_centered * 4.0, iTime + 2.0)) * time_factor\n    ) * 0.5;\n    \n    return vec4(final_color, 1.0);\n}"
}