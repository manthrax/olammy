{
  "src": "vec4 Effect2(vec2 uv) {\n    // Node grid spacing and size\n    const float nodeSize = 0.1;\n    const float glowIntensity = 1.5;\n    \n    // Get mouse position from texture coordinates\n    vec2 mouse_pos = uv * 2.0 - 1.0; // Convert to [-1,1] range\n    \n    // Calculate nearest grid points\n    vec2 ipos = floor(uv * 10.0);\n    vec2 pos = (ipos + noise(ipos)) / 10.0;\n    \n    // Node color and pulsing\n    float distance_to_mouse = length(uv - mouse_pos);\n    float node_falloff = 1.0 / (distance_to_mouse + 1.0);\n    float pulse = sin(iTime * 2.0 + pos.x * 5.0) * 0.5 + 0.5;\n    \n    // Node glow effect\n    vec3 hsl_color = vec3(\n        fract(pos.x * 5.0 + iTime * 0.5),\n        0.8,\n        pulse * node_falloff * 0.6 + 0.4\n    );\n    vec3 rgb_color = hsl2rgb(hsl_color);\n    \n    // Draw lines between nodes\n    float lineIntensity = 0.0;\n    \n    // Right neighbor connection\n    vec2 pos_right = (ipos + vec2(1.0, 0.0) + noise(ipos + vec2(1.0, 0.0))) / 10.0;\n    vec2 line_right = mix(pos, pos_right, 0.5);\n    float dist_right = length(uv - line_right) * 3.0;\n    \n    // Up neighbor connection\n    vec2 pos_up = (ipos + vec2(0.0, 1.0) + noise(ipos + vec2(0.0, 1.0))) / 10.0;\n    vec2 line_up = mix(pos, pos_up, 0.5);\n    float dist_up = length(uv - line_up) * 3.0;\n    \n    // Combine line effects\n    lineIntensity += smoothstep(1.0, 0.0, dist_right) * 0.8;\n    lineIntensity += smoothstep(1.0, 0.0, dist_up) * 0.8;\n    \n    // Final color combination\n    vec3 final_color = rgb_color * (node_falloff * glowIntensity + lineIntensity);\n    \n    return vec4(final_color, 1.0);\n}"
}